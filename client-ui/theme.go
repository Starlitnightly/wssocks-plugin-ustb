// Code generated by fyne-theme-generator

package main

import (
	"image/color"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/theme"
)

type myTheme struct{}


func (l *myTheme) Color(n fyne.ThemeColorName, v fyne.ThemeVariant) color.Color {
	switch n {
	case theme.ColorNameBackground:
		return  color.RGBA{R: 0xff, G: 0xff, B: 0xff, A: 0xff}
	case theme.ColorNameForeground:
		return color.RGBA{R: 0x21, G: 0x21, B: 0x21, A: 0xff}
	case theme.ColorNameInputBackground:
		return  color.RGBA{R: 0xff, G: 0xff, B: 0xff, A: 0xff}
	case theme.ColorNamePrimary:
		return color.RGBA{R: 0x2e, G: 0x85, B: 0x55, A: 0xff}
	default:
		return theme.DefaultTheme().Color(n, v)
	}
}

func (l *myTheme) Font(s fyne.TextStyle) fyne.Resource {
	if s.Monospace {
		return theme.LightTheme().Font(fyne.TextStyle{Monospace: true})
	}
	if s.Bold {
		if s.Italic {
			return theme.LightTheme().Font(fyne.TextStyle{Bold: true, Italic: true})
		}
		return theme.LightTheme().Font(fyne.TextStyle{Bold: true})
	}
	if s.Italic {
		return  theme.LightTheme().Font(fyne.TextStyle{Italic: true})
	}
	return theme.LightTheme().Font(fyne.TextStyle{})
}

func (l *myTheme) Icon(n fyne.ThemeIconName) fyne.Resource {
	return theme.DefaultTheme().Icon(n)
}

func (l *myTheme) Size(n fyne.ThemeSizeName) float32 {
	switch n {
	case theme.SizeNameInlineIcon:
		return 20.0
	case theme.SizeNamePadding:
		return 4.0
	case theme.SizeNameScrollBar:
		return 16.0
	case theme.SizeNameScrollBarSmall:
		return 3.0
	case theme.SizeNameText:
		return 14.0
	default:
		return theme.DefaultTheme().Size(n)
	}
}
